name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main", "develop"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Imposta NEXT_PUBLIC_ENV in base al branch
      - name: Set NEXT_PUBLIC_ENV
        run: |
          BRANCH=${GITHUB_REF##*/}
          if [ "$BRANCH" == "main" ]; then
            echo "NEXT_PUBLIC_ENV=production" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_ENV=staging" >> $GITHUB_ENV
          fi

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci --legacy-peer-deps" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      # Esegui l'export statico: l'output verrà generato nella cartella "out"
      - name: Export static site
        run: ${{ steps.detect-package-manager.outputs.runner }} next export

      # Se il branch è "main", carica l'output così com'è
      - name: Upload artifact for production
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

      # Se il branch è "develop", copia l'output in una cartella "staging"
      - name: Prepare staging folder
        if: github.ref == 'refs/heads/develop'
        run: |
          mkdir -p tmp_out/staging
          cp -r out/* tmp_out/staging/
      - name: Upload artifact for staging
        if: github.ref == 'refs/heads/develop'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./tmp_out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
